{"version":3,"sources":["rock-paper-scissors.js"],"names":["RockPaperScissors","selector","tie","p1","p2","evt","btn","target","move","dataset","player1move","player2move","player2","randomGuess","MOVES","latestOutcome","pickWinner","updateGameStatus","p1m","p2m","console","log","outcome","message","OUTCOMES","CustomEvent","detail","document","dispatchEvent","setup","btns","gameBoardEl","querySelectorAll","forEach","addEventListener","handleMove","player1","Player","resultEl","querySelector","StatusMessage","scoreboardEl","Scoreboard","Game"],"mappings":"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","sourcesContent":["class RockPaperScissors extends Game {\n\n    MOVES = ['rock', 'paper', 'scissors']\n    OUTCOMES = {\n        tie: 'Tied',\n        p1: 'Player 1 won',\n        p2: 'Player 2 won'\n    }\n\n    constructor(selector) {\n        super(selector)\n\n        this.setup()\n    }\n\n    setup() {\n        const btns = this.gameBoardEl.querySelectorAll('.move button')\n        btns.forEach((btn) => {\n            btn.addEventListener('click', this.handleMove)\n        })\n\n        this.player1 = new Player(\"me\")\n        this.player2 = new Player(\"computer\")\n\n        const resultEl = this.gameBoardEl.querySelector('#round-result')\n        new StatusMessage(resultEl)\n\n        const scoreboardEl = this.gameBoardEl.querySelector('#scoreboard')\n        new Scoreboard(scoreboardEl)\n    }\n\n    handleMove = (evt) => {\n        const btn = evt.target\n        const move =  btn.dataset.move\n\n        const player1move = move;\n        const player2move = this.player2.randomGuess(this.MOVES)\n\n        this.latestOutcome = this.pickWinner(player1move, player2move)\n        this.updateGameStatus()\n    }\n\n    pickWinner = (p1m, p2m) => {\n        console.log('player guesses:', p1m, p2m)\n        let outcome = \"\"\n\n        if (p1m == p2m) { // tie\n            outcome = \"tie\"\n        } else {\n            if (p1m == 'rock') {\n                if (p2m == 'paper') {\n                    outcome = \"p2\"\n                } else {\n                    outcome = \"p1\"\n                }\n            } else if (p1m == 'paper') {\n                if (p2m == 'rock') {\n                    outcome = 'p1'\n                } else {\n                    outcome = 'p2'\n                }\n            } else if (p1m == 'scissors') {\n                if (p2m == 'rock') {\n                    outcome = 'p2'\n                } else {\n                    outcome = 'p1'\n                }\n            }\n        }\n\n        return outcome\n    }\n\n    updateGameStatus = () => {\n        const message = this.OUTCOMES[this.latestOutcome]\n        const evt = new CustomEvent(\"game-status\", { detail: { message: message }})\n        document.dispatchEvent(evt)\n    }\n}"],"file":"rock-paper-scissors.js"}